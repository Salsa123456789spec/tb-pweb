generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  mahasiswa
  admin
  asisten_lab
}

enum Status {
  menunggu
  diterima
  ditolak
}

enum Tahapan {
  tahap1
  tahap2
  tahap3
}

enum StatusKumpul {
  terkumpul
  terlambat
  belum_terkumpul
}

enum KehadiranStatus {
  Hadir
  Tidak_Hadir
}

model User {
  id            Int            @id @default(autoincrement())
  nim           String?        @unique
  no_aslab      String?        @unique   
  name          String
  email         String         @unique
  password      String
  role          Role

  // Relasi balik ke Pendaftaran
  pendaftarans  Pendaftaran[]  @relation("UserToPendaftaran")
  
  pengumuman    Pengumuman[]
}

model Pendaftaran {
  id                      Int      @id @default(autoincrement())
  user_id                 Int
  domisili                String   @db.VarChar(100)
  asal                    String   @db.VarChar(100)
  nomor_whatsapp          String   @db.VarChar(20)
  divisi                  String   @db.VarChar(100)
  CV_file                 String   @db.VarChar(255)
  KRS_file                String   @db.VarChar(255)
  KHS_file                String   @db.VarChar(255)
  surat_permohonan_file   String   @db.VarChar(255)
  alasan                  String?  @db.Text
  pernyataan              Boolean
  status                  Status   @default(menunggu)

  user                    User     @relation("UserToPendaftaran", fields: [user_id], references: [id])
  jadwalWawancara         JadwalWawancara[]
  pengumuman              Pengumuman[]
  pengumpulanTugas        PengumpulanTugas[]
  feedbackKuisioner      FeedbackKuisioner?
  kehadiran               Kehadiran[]
}

model JadwalWawancara {
  id              Int      @id @default(autoincrement())
  pendaftaran_id  Int
  waktu           DateTime
  pewawancara_id  Int?
  ruang           String?
  tanggal         DateTime?

  pendaftaran     Pendaftaran  @relation(fields: [pendaftaran_id], references: [id])
  komplain        KomplainJadwal[]
  pewawancara     Pewawancara? @relation(fields: [pewawancara_id], references: [id])
}

model Pewawancara {
  id        Int               @id @default(autoincrement())
  nama      String
  kontak    String
  jadwal    JadwalWawancara[]
}

model KomplainJadwal {
  id                  Int       @id @default(autoincrement())
  jadwal_id           Int
  alasan              String
  status              String    @default("menunggu")
  tanggal_pengajuan   DateTime  @default(now())
  tanggal_diajukan    DateTime?
  waktu_diajukan      DateTime?

  jadwal              JadwalWawancara @relation(fields: [jadwal_id], references: [id])
}

model Pengumuman {
  id               Int       @id @default(autoincrement())
  user_id          Int
  pendaftaran_id   Int       
  tahapan          Tahapan?

  user             User      @relation(fields: [user_id], references: [id])
  pendaftaran      Pendaftaran @relation(fields: [pendaftaran_id], references: [id])
}

model Tugas {
  id               Int                @id @default(autoincrement())
  judul            String
  deskripsi        String?
  deadline         DateTime

  pengumpulanTugas PengumpulanTugas[]
}

model PengumpulanTugas {
  id               Int       @id @default(autoincrement())
  tugas_id         Int
  pendaftaran_id   Int
  file             String
  tanggal_kumpul   DateTime  @default(now())
  status           StatusKumpul    @default(belum_terkumpul)

  tugas            Tugas     @relation(fields: [tugas_id], references: [id])
  pendaftaran      Pendaftaran @relation(fields: [pendaftaran_id], references: [id])
}

model Kehadiran {
  id             Int              @id @default(autoincrement())
  pendaftaran_id Int
  pertemuan      Int
  tanggal        DateTime
  status         KehadiranStatus
  pembahasan     String?          @db.Text
  pendaftaran    Pendaftaran      @relation(fields: [pendaftaran_id], references: [id])

  @@unique([pendaftaran_id, pertemuan])
}

model FAQ {
  id         Int    @id @default(autoincrement())
  pertanyaan String
  jawaban    String
}

model FeedbackKuisioner {
  id                            Int           @id @default(autoincrement())
  pendaftaran_id                Int           @unique
  kejelasan_soal                Int
  alokasi_waktu                 Int
  kondisi_ruangan               Int
  profesionalisme_pewawancara   Int
  bimbingan_arahan              Int
  supervisi                     Int
  kualitas_mentoring            Int
  proses_keseluruhan            Int
  saran                         String?
  kesan_pesan                   String?

  pendaftaran                   Pendaftaran   @relation(fields: [pendaftaran_id], references: [id])
}
